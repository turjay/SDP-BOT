from api import get_ohlcv, place_order, get_account_balance
from utils import check_balance
from indicators import bollinger_trade_signal, macd_trade_signal, rsi_trade_signal, stochastic_trade_signal, atr_trade_signal
from model import train_model, model_trade_signal
from config import logger
from signal_pool import SignalPool

def main():
    """
    The main function that runs the trading bot without a time loop.

    The function fetches market data when needed, analyzes it using various strategies
    including machine learning models and technical indicators, and executes trades
    based on the combined signals generated by SignalPool.
    """
    symbol = 'BTCTRY'  # The trading symbol for the cryptocurrency
    quantity = 0.000055  # Amount of BTC for buy/sell orders
    tl_quantity = 105  # Amount of TL to be used for purchasing
    model = None  # Initial value for the machine learning model

    # Initialize the signal pool to aggregate signals from different strategies
    signal_pool = SignalPool()
    previous_combined_signal = None

    try:
        # Check TL balance and buy BTC if sufficient balance is available
        if check_balance('TRY', tl_quantity, get_account_balance()):
            logger.info('Buying BTC...')
            place_order(symbol, 'buy', tl_quantity)
        else:
            logger.info("Not enough TL balance to buy BTC.")
        
        # Fetch and analyze OHLCV data
        df = get_ohlcv(symbol)
        if df.empty:
            logger.info("No data to analyze.")
            return  # If no data is fetched, terminate the process
        
        # Train the machine learning model (only if not trained yet)
        if model is None:
            model = train_model(df)
            logger.info("Model trained successfully.")
        
        # Add signals from different strategies to the signal pool
        signal_pool.add_signal('bollinger', bollinger_trade_signal(df), weight=1)
        signal_pool.add_signal('macd', macd_trade_signal(df), weight=1)
        signal_pool.add_signal('rsi', rsi_trade_signal(df), weight=1)
        signal_pool.add_signal('stochastic', stochastic_trade_signal(df), weight=1)
        signal_pool.add_signal('atr', atr_trade_signal(df), weight=1)
        signal_pool.add_signal('ml', model_trade_signal(df, model), weight=2)  # Give ML more weight

        # Get the combined signal from the signal pool
        combined_signal = signal_pool.get_combined_signal()

        # Execute a trade if the combined signal has changed
        if combined_signal != previous_combined_signal:
            if combined_signal == 'buy':
                logger.info('Buying BTC (Combined Signal)...')
                place_order(symbol, 'buy', quantity)
            elif combined_signal == 'sell':
                logger.info('Selling BTC (Combined Signal)...')
                place_order(symbol, 'sell', quantity)

            previous_combined_signal = combined_signal

        # Reset the signal pool after each round of analysis
        signal_pool.reset()

    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()